package nacos

import (
	"fmt"
	"github.com/nacos-group/nacos-sdk-go/v2/clients"
	"github.com/nacos-group/nacos-sdk-go/v2/clients/config_client"
	"github.com/nacos-group/nacos-sdk-go/v2/clients/naming_client"
	"github.com/nacos-group/nacos-sdk-go/v2/common/constant"
	"github.com/nacos-group/nacos-sdk-go/v2/common/logger"
	"github.com/nacos-group/nacos-sdk-go/v2/model"
	"github.com/nacos-group/nacos-sdk-go/v2/vo"
	"os"
	"spark_datalake/config"
	"go-pkg/global"
	"go-pkg/mylog"
)

type Nacos struct {
	// 监听配置回调通知函数 ，接收content内容 返回 int
	// 业务侧创建一个回调函数  func xxxxx(data string) (flag int) {}
	// nacos.Nacos{Callback: xxxx}
	Callback     func(group, dataId, content string) error
	config       Config
	client       config_client.IConfigClient
	namingClient naming_client.INamingClient
}

type Config struct {
	IpAddr      string
	ContextPath string
	Scheme      string
	Port        uint64
	GrpcPort    uint64
	NamespaceId string
	Group       string
}

func InitNacos() {
	logger.SetLogger(mylog.GetLogger())
}

func New(config Config) *Nacos {
	nacos := &Nacos{
		config: config,
	}
	// 创建动态配置客户端的另一种方式 (推荐)
	client, err := clients.NewConfigClient(nacos.getClientParam())
	if err != nil {
		panic("无法创建Nacos动态配置客户端")
	}
	nacos.client = client
	return nacos
}

func NewNaming(config Config) *Nacos {
	nacos := &Nacos{
		config: config,
	}
	// 创建服务发现客户端的另一种方式 (推荐)
	namingClient, err := clients.NewNamingClient(nacos.getClientParam())
	if err != nil {
		panic("无法创建Nacos服务发现客户端")
	}
	nacos.namingClient = namingClient
	return nacos
}

//
// getClientParam
// @Description: 获取创建客户端参数
// @receiver p
// @return vo.NacosClientParam
//
func (p *Nacos) getClientParam() vo.NacosClientParam {
	sc := []constant.ServerConfig{{
		IpAddr:      p.config.IpAddr,
		Port:        p.config.Port,
		GrpcPort:    p.config.GrpcPort, // Nacos的 grpc 服务端口, 默认为 服务端口+1000, 不是必填
		ContextPath: p.config.ContextPath,
		Scheme:      p.config.Scheme,
	}}
	currentDir, err := os.Getwd()
	if currentDir == "/" {
		currentDir = ""
	}
	if err != nil {
		panic("无法创建Nacos动态配置客户端：无法获取当前路径")
	}
	cc := constant.ClientConfig{
		NamespaceId: p.config.NamespaceId,
		TimeoutMs:   5 * 1000,
		//ListenInterval:      30 * 1000,
		NotLoadCacheAtStart: true,
		CacheDir:            currentDir,                              //默认会把缓存下来的文件写入 currentDir/config
		AccessKey:           config.ServerConf.NacosConf.AccessKeyId, // ACM&KMS的AccessKey，用于配置中心的鉴权
		SecretKey:           config.ServerConf.NacosConf.AccessKeySecret,
	}
	return vo.NacosClientParam{
		ClientConfig:  &cc,
		ServerConfigs: sc,
	}
}

// 读取配置内容
//(n Nacos)
func (p *Nacos) GetConfig(group, dataId string) (content string, err error) {
	content, err = p.client.GetConfig(vo.ConfigParam{
		DataId: dataId,
		Group:  group,
	})
	if err != nil {
		mylog.Error(nil, global.LogNacos, fmt.Sprintf("send msg failed, err:%s", err.Error()))
		panic("无法连接Nacos，需要重新发布")
	}
	_ = p.Callback(group, dataId, content)
	// 增加监听配置是否变化
	p.client.ListenConfig(vo.ConfigParam{
		DataId: dataId,
		Group:  group,
		OnChange: func(namespace, group, dataId, content string) {
			mylog.WithInfo(nil, global.LogNacos, map[string]interface{}{
				"namespace": namespace,
				"group":     group,
				"dataId":    dataId,
				"content":   content,
			}, "配置变动")
			// 避免出现运行中改错配置，导致监听配置恐慌
			global.GoPool.Submit(func() {
				_ = p.Callback(group, dataId, content)
			})
		},
	})
	return
}

func (p *Nacos) SelectOneHealthyInstance(serviceName string, groupName string, clusters []string) (instance *model.Instance, err error) {
	instance, err = p.namingClient.SelectOneHealthyInstance(vo.SelectOneHealthInstanceParam{
		ServiceName: serviceName,
		GroupName:   groupName, // 默认值DEFAULT_GROUP
		Clusters:    clusters,  // 默认值DEFAULT
	})
	return
}

type SubscribeParam struct {
	ServiceName       string                               `param:"serviceName"` //required
	Clusters          []string                             `param:"clusters"`    //optional,default:DEFAULT
	GroupName         string                               `param:"groupName"`   //optional,default:DEFAULT_GROUP
	SubscribeCallback func(services []Instance, err error) //required
}

type Instance model.Instance

func (p *Nacos) Subscribe(param *SubscribeParam) error {
	return p.namingClient.Subscribe(&vo.SubscribeParam{
		ServiceName: param.ServiceName,
		Clusters:    param.Clusters,
		GroupName:   param.GroupName,
		SubscribeCallback: func(services []model.Instance, err error) {
			var copyInstance = make([]Instance, 0, len(services))
			for _, v := range services {
				copyInstance = append(copyInstance, Instance{
					ClusterName:               v.ClusterName,
					Enable:                    v.Enable,
					InstanceId:                v.InstanceId,
					Ip:                        v.Ip,
					Metadata:                  v.Metadata,
					Port:                      v.Port,
					ServiceName:               v.ServiceName,
					Ephemeral:                 v.Ephemeral,
					Weight:                    v.Weight,
					Healthy:                   v.Healthy,
					InstanceHeartBeatInterval: v.InstanceHeartBeatInterval,
					IpDeleteTimeout:           v.IpDeleteTimeout,
					InstanceHeartBeatTimeOut:  v.InstanceHeartBeatTimeOut,
				})
			}
			param.SubscribeCallback(copyInstance, err)
		},
	})
}
